/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/': {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  '/chatbot_assignment': {
    get: {
      parameters: {
        query: {
          /** Chatbot module id number */
          cm_id?: parameters['rowFilter.chatbot_assignment.cm_id'];
          /** User's id number */
          user_id?: parameters['rowFilter.chatbot_assignment.user_id'];
          /** Due date of the assignment */
          duedate?: parameters['rowFilter.chatbot_assignment.duedate'];
          /** Date and time the assignment was completed */
          completed_at?: parameters['rowFilter.chatbot_assignment.completed_at'];
          /** Whether or not this assignment has been completed */
          completed?: parameters['rowFilter.chatbot_assignment.completed'];
          /** Creation date and time of this assignment */
          created_at?: parameters['rowFilter.chatbot_assignment.created_at'];
          /** Filtering Columns */
          select?: parameters['select'];
          /** Ordering */
          order?: parameters['order'];
          /** Limiting and Pagination */
          offset?: parameters['offset'];
          /** Limiting and Pagination */
          limit?: parameters['limit'];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range'];
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit'];
          /** Preference */
          Prefer?: parameters['preferCount'];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['chatbot_assignment'][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** chatbot_assignment */
          chatbot_assignment?: definitions['chatbot_assignment'];
        };
        query: {
          /** Filtering Columns */
          select?: parameters['select'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          /** Chatbot module id number */
          cm_id?: parameters['rowFilter.chatbot_assignment.cm_id'];
          /** User's id number */
          user_id?: parameters['rowFilter.chatbot_assignment.user_id'];
          /** Due date of the assignment */
          duedate?: parameters['rowFilter.chatbot_assignment.duedate'];
          /** Date and time the assignment was completed */
          completed_at?: parameters['rowFilter.chatbot_assignment.completed_at'];
          /** Whether or not this assignment has been completed */
          completed?: parameters['rowFilter.chatbot_assignment.completed'];
          /** Creation date and time of this assignment */
          created_at?: parameters['rowFilter.chatbot_assignment.created_at'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          /** Chatbot module id number */
          cm_id?: parameters['rowFilter.chatbot_assignment.cm_id'];
          /** User's id number */
          user_id?: parameters['rowFilter.chatbot_assignment.user_id'];
          /** Due date of the assignment */
          duedate?: parameters['rowFilter.chatbot_assignment.duedate'];
          /** Date and time the assignment was completed */
          completed_at?: parameters['rowFilter.chatbot_assignment.completed_at'];
          /** Whether or not this assignment has been completed */
          completed?: parameters['rowFilter.chatbot_assignment.completed'];
          /** Creation date and time of this assignment */
          created_at?: parameters['rowFilter.chatbot_assignment.created_at'];
        };
        body: {
          /** chatbot_assignment */
          chatbot_assignment?: definitions['chatbot_assignment'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  '/chatbot_attempt': {
    get: {
      parameters: {
        query: {
          /** User id number */
          user_id?: parameters['rowFilter.chatbot_attempt.user_id'];
          /** Start date and time of a chatbot attempt */
          started_at?: parameters['rowFilter.chatbot_attempt.started_at'];
          /** Chatbot module id number */
          cm_id?: parameters['rowFilter.chatbot_attempt.cm_id'];
          completed?: parameters['rowFilter.chatbot_attempt.completed'];
          completed_at?: parameters['rowFilter.chatbot_attempt.completed_at'];
          id?: parameters['rowFilter.chatbot_attempt.id'];
          /** Filtering Columns */
          select?: parameters['select'];
          /** Ordering */
          order?: parameters['order'];
          /** Limiting and Pagination */
          offset?: parameters['offset'];
          /** Limiting and Pagination */
          limit?: parameters['limit'];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range'];
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit'];
          /** Preference */
          Prefer?: parameters['preferCount'];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['chatbot_attempt'][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** chatbot_attempt */
          chatbot_attempt?: definitions['chatbot_attempt'];
        };
        query: {
          /** Filtering Columns */
          select?: parameters['select'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          /** User id number */
          user_id?: parameters['rowFilter.chatbot_attempt.user_id'];
          /** Start date and time of a chatbot attempt */
          started_at?: parameters['rowFilter.chatbot_attempt.started_at'];
          /** Chatbot module id number */
          cm_id?: parameters['rowFilter.chatbot_attempt.cm_id'];
          completed?: parameters['rowFilter.chatbot_attempt.completed'];
          completed_at?: parameters['rowFilter.chatbot_attempt.completed_at'];
          id?: parameters['rowFilter.chatbot_attempt.id'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          /** User id number */
          user_id?: parameters['rowFilter.chatbot_attempt.user_id'];
          /** Start date and time of a chatbot attempt */
          started_at?: parameters['rowFilter.chatbot_attempt.started_at'];
          /** Chatbot module id number */
          cm_id?: parameters['rowFilter.chatbot_attempt.cm_id'];
          completed?: parameters['rowFilter.chatbot_attempt.completed'];
          completed_at?: parameters['rowFilter.chatbot_attempt.completed_at'];
          id?: parameters['rowFilter.chatbot_attempt.id'];
        };
        body: {
          /** chatbot_attempt */
          chatbot_attempt?: definitions['chatbot_attempt'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  '/chatbot_attempt_message': {
    get: {
      parameters: {
        query: {
          /** Chatbot module attempt id number */
          attempt_id?: parameters['rowFilter.chatbot_attempt_message.attempt_id'];
          /** Date and time the message was sent at */
          created_at?: parameters['rowFilter.chatbot_attempt_message.created_at'];
          /** Content of the message */
          text?: parameters['rowFilter.chatbot_attempt_message.text'];
          /** Filtering Columns */
          select?: parameters['select'];
          /** Ordering */
          order?: parameters['order'];
          /** Limiting and Pagination */
          offset?: parameters['offset'];
          /** Limiting and Pagination */
          limit?: parameters['limit'];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range'];
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit'];
          /** Preference */
          Prefer?: parameters['preferCount'];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['chatbot_attempt_message'][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** chatbot_attempt_message */
          chatbot_attempt_message?: definitions['chatbot_attempt_message'];
        };
        query: {
          /** Filtering Columns */
          select?: parameters['select'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          /** Chatbot module attempt id number */
          attempt_id?: parameters['rowFilter.chatbot_attempt_message.attempt_id'];
          /** Date and time the message was sent at */
          created_at?: parameters['rowFilter.chatbot_attempt_message.created_at'];
          /** Content of the message */
          text?: parameters['rowFilter.chatbot_attempt_message.text'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          /** Chatbot module attempt id number */
          attempt_id?: parameters['rowFilter.chatbot_attempt_message.attempt_id'];
          /** Date and time the message was sent at */
          created_at?: parameters['rowFilter.chatbot_attempt_message.created_at'];
          /** Content of the message */
          text?: parameters['rowFilter.chatbot_attempt_message.text'];
        };
        body: {
          /** chatbot_attempt_message */
          chatbot_attempt_message?: definitions['chatbot_attempt_message'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  '/chatbot_module': {
    get: {
      parameters: {
        query: {
          /** Chatbot module id number */
          id?: parameters['rowFilter.chatbot_module.id'];
          /** Filtering Columns */
          select?: parameters['select'];
          /** Ordering */
          order?: parameters['order'];
          /** Limiting and Pagination */
          offset?: parameters['offset'];
          /** Limiting and Pagination */
          limit?: parameters['limit'];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range'];
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit'];
          /** Preference */
          Prefer?: parameters['preferCount'];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['chatbot_module'][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** chatbot_module */
          chatbot_module?: definitions['chatbot_module'];
        };
        query: {
          /** Filtering Columns */
          select?: parameters['select'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          /** Chatbot module id number */
          id?: parameters['rowFilter.chatbot_module.id'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          /** Chatbot module id number */
          id?: parameters['rowFilter.chatbot_module.id'];
        };
        body: {
          /** chatbot_module */
          chatbot_module?: definitions['chatbot_module'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  '/forum_post': {
    get: {
      parameters: {
        query: {
          /** Forum post module id number */
          id?: parameters['rowFilter.forum_post.id'];
          /** Forum post creation datetime */
          created_at?: parameters['rowFilter.forum_post.created_at'];
          /** Forum post content */
          text?: parameters['rowFilter.forum_post.text'];
          /** Username used in the forum post */
          username?: parameters['rowFilter.forum_post.username'];
          /** Whether or not the forum post should be approved */
          valid?: parameters['rowFilter.forum_post.valid'];
          /** Comments made by an administrator about this forum post module */
          comments?: parameters['rowFilter.forum_post.comments'];
          /** Filtering Columns */
          select?: parameters['select'];
          /** Ordering */
          order?: parameters['order'];
          /** Limiting and Pagination */
          offset?: parameters['offset'];
          /** Limiting and Pagination */
          limit?: parameters['limit'];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range'];
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit'];
          /** Preference */
          Prefer?: parameters['preferCount'];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['forum_post'][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** forum_post */
          forum_post?: definitions['forum_post'];
        };
        query: {
          /** Filtering Columns */
          select?: parameters['select'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          /** Forum post module id number */
          id?: parameters['rowFilter.forum_post.id'];
          /** Forum post creation datetime */
          created_at?: parameters['rowFilter.forum_post.created_at'];
          /** Forum post content */
          text?: parameters['rowFilter.forum_post.text'];
          /** Username used in the forum post */
          username?: parameters['rowFilter.forum_post.username'];
          /** Whether or not the forum post should be approved */
          valid?: parameters['rowFilter.forum_post.valid'];
          /** Comments made by an administrator about this forum post module */
          comments?: parameters['rowFilter.forum_post.comments'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          /** Forum post module id number */
          id?: parameters['rowFilter.forum_post.id'];
          /** Forum post creation datetime */
          created_at?: parameters['rowFilter.forum_post.created_at'];
          /** Forum post content */
          text?: parameters['rowFilter.forum_post.text'];
          /** Username used in the forum post */
          username?: parameters['rowFilter.forum_post.username'];
          /** Whether or not the forum post should be approved */
          valid?: parameters['rowFilter.forum_post.valid'];
          /** Comments made by an administrator about this forum post module */
          comments?: parameters['rowFilter.forum_post.comments'];
        };
        body: {
          /** forum_post */
          forum_post?: definitions['forum_post'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  '/forum_post_assignment': {
    get: {
      parameters: {
        query: {
          /** User id number */
          user_id?: parameters['rowFilter.forum_post_assignment.user_id'];
          /** Forum post id number */
          fp_id?: parameters['rowFilter.forum_post_assignment.fp_id'];
          /** Creation date and time of this assignment */
          created_at?: parameters['rowFilter.forum_post_assignment.created_at'];
          /** Due date of this assignment */
          duedate?: parameters['rowFilter.forum_post_assignment.duedate'];
          /** Date and time that the assignment was completed at */
          completed_at?: parameters['rowFilter.forum_post_assignment.completed_at'];
          /** Whether or not this assignment has been completed */
          completed?: parameters['rowFilter.forum_post_assignment.completed'];
          /** Filtering Columns */
          select?: parameters['select'];
          /** Ordering */
          order?: parameters['order'];
          /** Limiting and Pagination */
          offset?: parameters['offset'];
          /** Limiting and Pagination */
          limit?: parameters['limit'];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range'];
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit'];
          /** Preference */
          Prefer?: parameters['preferCount'];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['forum_post_assignment'][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** forum_post_assignment */
          forum_post_assignment?: definitions['forum_post_assignment'];
        };
        query: {
          /** Filtering Columns */
          select?: parameters['select'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          /** User id number */
          user_id?: parameters['rowFilter.forum_post_assignment.user_id'];
          /** Forum post id number */
          fp_id?: parameters['rowFilter.forum_post_assignment.fp_id'];
          /** Creation date and time of this assignment */
          created_at?: parameters['rowFilter.forum_post_assignment.created_at'];
          /** Due date of this assignment */
          duedate?: parameters['rowFilter.forum_post_assignment.duedate'];
          /** Date and time that the assignment was completed at */
          completed_at?: parameters['rowFilter.forum_post_assignment.completed_at'];
          /** Whether or not this assignment has been completed */
          completed?: parameters['rowFilter.forum_post_assignment.completed'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          /** User id number */
          user_id?: parameters['rowFilter.forum_post_assignment.user_id'];
          /** Forum post id number */
          fp_id?: parameters['rowFilter.forum_post_assignment.fp_id'];
          /** Creation date and time of this assignment */
          created_at?: parameters['rowFilter.forum_post_assignment.created_at'];
          /** Due date of this assignment */
          duedate?: parameters['rowFilter.forum_post_assignment.duedate'];
          /** Date and time that the assignment was completed at */
          completed_at?: parameters['rowFilter.forum_post_assignment.completed_at'];
          /** Whether or not this assignment has been completed */
          completed?: parameters['rowFilter.forum_post_assignment.completed'];
        };
        body: {
          /** forum_post_assignment */
          forum_post_assignment?: definitions['forum_post_assignment'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  '/forum_post_attempt': {
    get: {
      parameters: {
        query: {
          /** User id number */
          user_id?: parameters['rowFilter.forum_post_attempt.user_id'];
          /** Forum post id number */
          fp_id?: parameters['rowFilter.forum_post_attempt.fp_id'];
          /** Attempt start time */
          created_at?: parameters['rowFilter.forum_post_attempt.created_at'];
          /** Whether or not the counsellor approved this forum post */
          approved?: parameters['rowFilter.forum_post_attempt.approved'];
          /** A counsellor's comment on why they did or didn't approve the post */
          comment?: parameters['rowFilter.forum_post_attempt.comment'];
          /** Forum post attempt completion date and time */
          finished_at?: parameters['rowFilter.forum_post_attempt.finished_at'];
          /** Filtering Columns */
          select?: parameters['select'];
          /** Ordering */
          order?: parameters['order'];
          /** Limiting and Pagination */
          offset?: parameters['offset'];
          /** Limiting and Pagination */
          limit?: parameters['limit'];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range'];
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit'];
          /** Preference */
          Prefer?: parameters['preferCount'];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['forum_post_attempt'][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** forum_post_attempt */
          forum_post_attempt?: definitions['forum_post_attempt'];
        };
        query: {
          /** Filtering Columns */
          select?: parameters['select'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          /** User id number */
          user_id?: parameters['rowFilter.forum_post_attempt.user_id'];
          /** Forum post id number */
          fp_id?: parameters['rowFilter.forum_post_attempt.fp_id'];
          /** Attempt start time */
          created_at?: parameters['rowFilter.forum_post_attempt.created_at'];
          /** Whether or not the counsellor approved this forum post */
          approved?: parameters['rowFilter.forum_post_attempt.approved'];
          /** A counsellor's comment on why they did or didn't approve the post */
          comment?: parameters['rowFilter.forum_post_attempt.comment'];
          /** Forum post attempt completion date and time */
          finished_at?: parameters['rowFilter.forum_post_attempt.finished_at'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          /** User id number */
          user_id?: parameters['rowFilter.forum_post_attempt.user_id'];
          /** Forum post id number */
          fp_id?: parameters['rowFilter.forum_post_attempt.fp_id'];
          /** Attempt start time */
          created_at?: parameters['rowFilter.forum_post_attempt.created_at'];
          /** Whether or not the counsellor approved this forum post */
          approved?: parameters['rowFilter.forum_post_attempt.approved'];
          /** A counsellor's comment on why they did or didn't approve the post */
          comment?: parameters['rowFilter.forum_post_attempt.comment'];
          /** Forum post attempt completion date and time */
          finished_at?: parameters['rowFilter.forum_post_attempt.finished_at'];
        };
        body: {
          /** forum_post_attempt */
          forum_post_attempt?: definitions['forum_post_attempt'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  '/user': {
    get: {
      parameters: {
        query: {
          /** User id number */
          id?: parameters['rowFilter.user.id'];
          created_at?: parameters['rowFilter.user.created_at'];
          /** User's first name */
          fname?: parameters['rowFilter.user.fname'];
          /** User's last name */
          lname?: parameters['rowFilter.user.lname'];
          /** User's email address */
          email?: parameters['rowFilter.user.email'];
          /** User type id number */
          type_id?: parameters['rowFilter.user.type_id'];
          /** id number of this user's supervisor */
          supervisor_id?: parameters['rowFilter.user.supervisor_id'];
          /** Filtering Columns */
          select?: parameters['select'];
          /** Ordering */
          order?: parameters['order'];
          /** Limiting and Pagination */
          offset?: parameters['offset'];
          /** Limiting and Pagination */
          limit?: parameters['limit'];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range'];
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit'];
          /** Preference */
          Prefer?: parameters['preferCount'];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['user'][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** user */
          user?: definitions['user'];
        };
        query: {
          /** Filtering Columns */
          select?: parameters['select'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          /** User id number */
          id?: parameters['rowFilter.user.id'];
          created_at?: parameters['rowFilter.user.created_at'];
          /** User's first name */
          fname?: parameters['rowFilter.user.fname'];
          /** User's last name */
          lname?: parameters['rowFilter.user.lname'];
          /** User's email address */
          email?: parameters['rowFilter.user.email'];
          /** User type id number */
          type_id?: parameters['rowFilter.user.type_id'];
          /** id number of this user's supervisor */
          supervisor_id?: parameters['rowFilter.user.supervisor_id'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          /** User id number */
          id?: parameters['rowFilter.user.id'];
          created_at?: parameters['rowFilter.user.created_at'];
          /** User's first name */
          fname?: parameters['rowFilter.user.fname'];
          /** User's last name */
          lname?: parameters['rowFilter.user.lname'];
          /** User's email address */
          email?: parameters['rowFilter.user.email'];
          /** User type id number */
          type_id?: parameters['rowFilter.user.type_id'];
          /** id number of this user's supervisor */
          supervisor_id?: parameters['rowFilter.user.supervisor_id'];
        };
        body: {
          /** user */
          user?: definitions['user'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  '/user_type': {
    get: {
      parameters: {
        query: {
          /** User type id number */
          id?: parameters['rowFilter.user_type.id'];
          /** Name of a user type (i.e. counsellor, administrator) */
          name?: parameters['rowFilter.user_type.name'];
          /** User type creation datetime */
          created_at?: parameters['rowFilter.user_type.created_at'];
          /** Filtering Columns */
          select?: parameters['select'];
          /** Ordering */
          order?: parameters['order'];
          /** Limiting and Pagination */
          offset?: parameters['offset'];
          /** Limiting and Pagination */
          limit?: parameters['limit'];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range'];
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit'];
          /** Preference */
          Prefer?: parameters['preferCount'];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['user_type'][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** user_type */
          user_type?: definitions['user_type'];
        };
        query: {
          /** Filtering Columns */
          select?: parameters['select'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          /** User type id number */
          id?: parameters['rowFilter.user_type.id'];
          /** Name of a user type (i.e. counsellor, administrator) */
          name?: parameters['rowFilter.user_type.name'];
          /** User type creation datetime */
          created_at?: parameters['rowFilter.user_type.created_at'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          /** User type id number */
          id?: parameters['rowFilter.user_type.id'];
          /** Name of a user type (i.e. counsellor, administrator) */
          name?: parameters['rowFilter.user_type.name'];
          /** User type creation datetime */
          created_at?: parameters['rowFilter.user_type.created_at'];
        };
        body: {
          /** user_type */
          user_type?: definitions['user_type'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  /** @description A counsellor's assignement to complete a chatbot module */
  chatbot_assignment: {
    /**
     * Format: bigint
     * @description Chatbot module id number
     *
     * Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `chatbot_module.id`.<fk table='chatbot_module' column='id'/>
     */
    cm_id: number;
    /**
     * Format: bigint
     * @description User's id number
     *
     * Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `user.id`.<fk table='user' column='id'/>
     */
    user_id: number;
    /**
     * Format: date
     * @description Due date of the assignment
     */
    duedate: string;
    /**
     * Format: timestamp with time zone
     * @description Date and time the assignment was completed
     */
    completed_at?: string;
    /**
     * Format: boolean
     * @description Whether or not this assignment has been completed
     */
    completed?: boolean;
    /**
     * Format: timestamp with time zone
     * @description Creation date and time of this assignment
     *
     * Note:
     * This is a Primary Key.<pk/>
     * @default now()
     */
    created_at: string;
  };
  /** @description Attempt of a counsellor at a chatbot module */
  chatbot_attempt: {
    /**
     * Format: bigint
     * @description User id number
     *
     * Note:
     * This is a Foreign Key to `user.id`.<fk table='user' column='id'/>
     */
    user_id: number;
    /**
     * Format: timestamp with time zone
     * @description Start date and time of a chatbot attempt
     * @default now()
     */
    started_at: string;
    /**
     * Format: bigint
     * @description Chatbot module id number
     *
     * Note:
     * This is a Foreign Key to `chatbot_module.id`.<fk table='chatbot_module' column='id'/>
     */
    cm_id: number;
    /** Format: boolean */
    completed: boolean;
    /** Format: timestamp with time zone */
    completed_at?: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
  };
  /** @description A message sent for a particular chatbot attempt */
  chatbot_attempt_message: {
    /**
     * Format: bigint
     * @description Chatbot module attempt id number
     *
     * Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `chatbot_attempt.id`.<fk table='chatbot_attempt' column='id'/>
     */
    attempt_id: number;
    /**
     * Format: timestamp with time zone
     * @description Date and time the message was sent at
     *
     * Note:
     * This is a Primary Key.<pk/>
     * @default now()
     */
    created_at: string;
    /**
     * Format: text
     * @description Content of the message
     */
    text: string;
  };
  /** @description A chatbot module */
  chatbot_module: {
    /**
     * Format: bigint
     * @description Chatbot module id number
     *
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
  };
  /** @description A forum post module */
  forum_post: {
    /**
     * Format: bigint
     * @description Forum post module id number
     *
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @description Forum post creation datetime
     * @default now()
     */
    created_at: string;
    /**
     * Format: text
     * @description Forum post content
     */
    text: string;
    /**
     * Format: character varying
     * @description Username used in the forum post
     */
    username: string;
    /**
     * Format: boolean
     * @description Whether or not the forum post should be approved
     */
    valid: boolean;
    /**
     * Format: text
     * @description Comments made by an administrator about this forum post module
     */
    comments?: string;
  };
  /** @description Assignment of a counsellor to a forum post module */
  forum_post_assignment: {
    /**
     * Format: bigint
     * @description User id number
     *
     * Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `user.id`.<fk table='user' column='id'/>
     */
    user_id: number;
    /**
     * Format: bigint
     * @description Forum post id number
     *
     * Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `forum_post.id`.<fk table='forum_post' column='id'/>
     */
    fp_id: number;
    /**
     * Format: timestamp with time zone
     * @description Creation date and time of this assignment
     *
     * Note:
     * This is a Primary Key.<pk/>
     * @default now()
     */
    created_at: string;
    /**
     * Format: date
     * @description Due date of this assignment
     */
    duedate: string;
    /**
     * Format: timestamp with time zone
     * @description Date and time that the assignment was completed at
     */
    completed_at?: string;
    /**
     * Format: boolean
     * @description Whether or not this assignment has been completed
     */
    completed: boolean;
  };
  /** @description A counsellor's attempt at a forum post module */
  forum_post_attempt: {
    /**
     * Format: bigint
     * @description User id number
     *
     * Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `user.id`.<fk table='user' column='id'/>
     */
    user_id: number;
    /**
     * Format: bigint
     * @description Forum post id number
     *
     * Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `forum_post.id`.<fk table='forum_post' column='id'/>
     */
    fp_id: number;
    /**
     * Format: timestamp with time zone
     * @description Attempt start time
     *
     * Note:
     * This is a Primary Key.<pk/>
     * @default now()
     */
    created_at: string;
    /**
     * Format: boolean
     * @description Whether or not the counsellor approved this forum post
     */
    approved: boolean;
    /**
     * Format: text
     * @description A counsellor's comment on why they did or didn't approve the post
     */
    comment: string;
    /**
     * Format: timestamp with time zone
     * @description Forum post attempt completion date and time
     */
    finished_at?: string;
  };
  /** @description A user of the system (i.e. counsellor, administrator) */
  user: {
    /**
     * Format: bigint
     * @description User id number
     *
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at: string;
    /**
     * Format: character varying
     * @description User's first name
     */
    fname: string;
    /**
     * Format: character varying
     * @description User's last name
     */
    lname: string;
    /**
     * Format: character varying
     * @description User's email address
     */
    email: string;
    /**
     * Format: bigint
     * @description User type id number
     *
     * Note:
     * This is a Foreign Key to `user_type.id`.<fk table='user_type' column='id'/>
     */
    type_id: number;
    /**
     * Format: bigint
     * @description id number of this user's supervisor
     *
     * Note:
     * This is a Foreign Key to `user.id`.<fk table='user' column='id'/>
     */
    supervisor_id?: number;
  };
  /** @description Type of the user (i.e. administrator, counsellor) */
  user_type: {
    /**
     * Format: bigint
     * @description User type id number
     *
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: character varying
     * @description Name of a user type (i.e. counsellor, administrator)
     */
    name: string;
    /**
     * Format: timestamp with time zone
     * @description User type creation datetime
     * @default now()
     */
    created_at: string;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: 'params=single-object';
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: 'return=representation' | 'return=minimal' | 'return=none';
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: 'count=none';
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description chatbot_assignment */
  'body.chatbot_assignment': definitions['chatbot_assignment'];
  /**
   * Format: bigint
   * @description Chatbot module id number
   */
  'rowFilter.chatbot_assignment.cm_id': string;
  /**
   * Format: bigint
   * @description User's id number
   */
  'rowFilter.chatbot_assignment.user_id': string;
  /**
   * Format: date
   * @description Due date of the assignment
   */
  'rowFilter.chatbot_assignment.duedate': string;
  /**
   * Format: timestamp with time zone
   * @description Date and time the assignment was completed
   */
  'rowFilter.chatbot_assignment.completed_at': string;
  /**
   * Format: boolean
   * @description Whether or not this assignment has been completed
   */
  'rowFilter.chatbot_assignment.completed': string;
  /**
   * Format: timestamp with time zone
   * @description Creation date and time of this assignment
   */
  'rowFilter.chatbot_assignment.created_at': string;
  /** @description chatbot_attempt */
  'body.chatbot_attempt': definitions['chatbot_attempt'];
  /**
   * Format: bigint
   * @description User id number
   */
  'rowFilter.chatbot_attempt.user_id': string;
  /**
   * Format: timestamp with time zone
   * @description Start date and time of a chatbot attempt
   */
  'rowFilter.chatbot_attempt.started_at': string;
  /**
   * Format: bigint
   * @description Chatbot module id number
   */
  'rowFilter.chatbot_attempt.cm_id': string;
  /** Format: boolean */
  'rowFilter.chatbot_attempt.completed': string;
  /** Format: timestamp with time zone */
  'rowFilter.chatbot_attempt.completed_at': string;
  /** Format: bigint */
  'rowFilter.chatbot_attempt.id': string;
  /** @description chatbot_attempt_message */
  'body.chatbot_attempt_message': definitions['chatbot_attempt_message'];
  /**
   * Format: bigint
   * @description Chatbot module attempt id number
   */
  'rowFilter.chatbot_attempt_message.attempt_id': string;
  /**
   * Format: timestamp with time zone
   * @description Date and time the message was sent at
   */
  'rowFilter.chatbot_attempt_message.created_at': string;
  /**
   * Format: text
   * @description Content of the message
   */
  'rowFilter.chatbot_attempt_message.text': string;
  /** @description chatbot_module */
  'body.chatbot_module': definitions['chatbot_module'];
  /**
   * Format: bigint
   * @description Chatbot module id number
   */
  'rowFilter.chatbot_module.id': string;
  /** @description forum_post */
  'body.forum_post': definitions['forum_post'];
  /**
   * Format: bigint
   * @description Forum post module id number
   */
  'rowFilter.forum_post.id': string;
  /**
   * Format: timestamp with time zone
   * @description Forum post creation datetime
   */
  'rowFilter.forum_post.created_at': string;
  /**
   * Format: text
   * @description Forum post content
   */
  'rowFilter.forum_post.text': string;
  /**
   * Format: character varying
   * @description Username used in the forum post
   */
  'rowFilter.forum_post.username': string;
  /**
   * Format: boolean
   * @description Whether or not the forum post should be approved
   */
  'rowFilter.forum_post.valid': string;
  /**
   * Format: text
   * @description Comments made by an administrator about this forum post module
   */
  'rowFilter.forum_post.comments': string;
  /** @description forum_post_assignment */
  'body.forum_post_assignment': definitions['forum_post_assignment'];
  /**
   * Format: bigint
   * @description User id number
   */
  'rowFilter.forum_post_assignment.user_id': string;
  /**
   * Format: bigint
   * @description Forum post id number
   */
  'rowFilter.forum_post_assignment.fp_id': string;
  /**
   * Format: timestamp with time zone
   * @description Creation date and time of this assignment
   */
  'rowFilter.forum_post_assignment.created_at': string;
  /**
   * Format: date
   * @description Due date of this assignment
   */
  'rowFilter.forum_post_assignment.duedate': string;
  /**
   * Format: timestamp with time zone
   * @description Date and time that the assignment was completed at
   */
  'rowFilter.forum_post_assignment.completed_at': string;
  /**
   * Format: boolean
   * @description Whether or not this assignment has been completed
   */
  'rowFilter.forum_post_assignment.completed': string;
  /** @description forum_post_attempt */
  'body.forum_post_attempt': definitions['forum_post_attempt'];
  /**
   * Format: bigint
   * @description User id number
   */
  'rowFilter.forum_post_attempt.user_id': string;
  /**
   * Format: bigint
   * @description Forum post id number
   */
  'rowFilter.forum_post_attempt.fp_id': string;
  /**
   * Format: timestamp with time zone
   * @description Attempt start time
   */
  'rowFilter.forum_post_attempt.created_at': string;
  /**
   * Format: boolean
   * @description Whether or not the counsellor approved this forum post
   */
  'rowFilter.forum_post_attempt.approved': string;
  /**
   * Format: text
   * @description A counsellor's comment on why they did or didn't approve the post
   */
  'rowFilter.forum_post_attempt.comment': string;
  /**
   * Format: timestamp with time zone
   * @description Forum post attempt completion date and time
   */
  'rowFilter.forum_post_attempt.finished_at': string;
  /** @description user */
  'body.user': definitions['user'];
  /**
   * Format: bigint
   * @description User id number
   */
  'rowFilter.user.id': string;
  /** Format: timestamp with time zone */
  'rowFilter.user.created_at': string;
  /**
   * Format: character varying
   * @description User's first name
   */
  'rowFilter.user.fname': string;
  /**
   * Format: character varying
   * @description User's last name
   */
  'rowFilter.user.lname': string;
  /**
   * Format: character varying
   * @description User's email address
   */
  'rowFilter.user.email': string;
  /**
   * Format: bigint
   * @description User type id number
   */
  'rowFilter.user.type_id': string;
  /**
   * Format: bigint
   * @description id number of this user's supervisor
   */
  'rowFilter.user.supervisor_id': string;
  /** @description user_type */
  'body.user_type': definitions['user_type'];
  /**
   * Format: bigint
   * @description User type id number
   */
  'rowFilter.user_type.id': string;
  /**
   * Format: character varying
   * @description Name of a user type (i.e. counsellor, administrator)
   */
  'rowFilter.user_type.name': string;
  /**
   * Format: timestamp with time zone
   * @description User type creation datetime
   */
  'rowFilter.user_type.created_at': string;
}

export interface operations {}

export interface external {}
