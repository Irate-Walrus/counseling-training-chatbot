generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model admin_module {
  id           BigInt    @id @default(autoincrement())
  title        String?   @default("") @db.VarChar
  description  String?   @default("")
  dateAccessed DateTime? @db.Timestamp(6)
}

model chatbot_assignment {
  cbm_id          BigInt
  user_id         BigInt
  duedate         DateTime         @db.Date
  completed_at    DateTime?        @db.Timestamptz(6)
  completed       Boolean?         @default(false)
  created_at      DateTime         @default(now()) @db.Timestamptz(6)
  attempt_id      BigInt?
  chatbot_attempt chatbot_attempt? @relation(fields: [attempt_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  chatbot_module  chatbot_module   @relation(fields: [cbm_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user            user             @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([cbm_id, user_id, created_at])
}

model chatbot_attempt {
  user_id                 BigInt
  id                      BigInt                    @id @default(autoincrement())
  cbm_id                  BigInt
  started_at              DateTime                  @default(now()) @db.Timestamptz(6)
  completed_at            DateTime?                 @db.Timestamptz(6)
  last_accessed           DateTime                  @default(now()) @db.Timestamptz(6)
  chatbot_module          chatbot_module            @relation(fields: [cbm_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user                    user                      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  chatbot_assignment      chatbot_assignment[]
  chatbot_attempt_message chatbot_attempt_message[]

  @@unique([cbm_id, user_id, started_at])
  @@unique([cbm_id, user_id, started_at], map: "chatbot_attempt_uk")
}

model chatbot_attempt_message {
  attempt_id                                         BigInt
  created_at                                         DateTime        @default(now()) @db.Timestamptz(6)
  text                                               String
  message_type                                       BigInt          @default(1)
  chatbot_attempt                                    chatbot_attempt @relation(fields: [attempt_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  message_type_chatbot_attempt_messageTomessage_type message_type    @relation(fields: [message_type], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([attempt_id, created_at])
}

model chatbot_module {
  id                 BigInt               @id @default(autoincrement())
  title              String               @db.VarChar
  description        String
  chatbot_assignment chatbot_assignment[]
  chatbot_attempt    chatbot_attempt[]
}

model forum_post {
  id                    BigInt                  @id @default(autoincrement())
  created_at            DateTime                @default(now()) @db.Timestamptz(6)
  text                  String
  username              String                  @db.VarChar
  valid                 Boolean
  comments              String?
  forum_post_assignment forum_post_assignment[]
  forum_post_attempt    forum_post_attempt[]
}

model forum_post_assignment {
  user_id      BigInt
  fp_id        BigInt
  created_at   DateTime   @default(now()) @db.Timestamptz(6)
  duedate      DateTime   @db.Date
  completed_at DateTime?  @db.Timestamptz(6)
  completed    Boolean    @default(false)
  forum_post   forum_post @relation(fields: [fp_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user         user       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([user_id, fp_id, created_at])
}

model forum_post_attempt {
  user_id     BigInt
  fp_id       BigInt
  created_at  DateTime   @default(now()) @db.Timestamptz(6)
  approved    Boolean
  comment     String
  finished_at DateTime?  @db.Timestamptz(6)
  forum_post  forum_post @relation(fields: [fp_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user        user       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([user_id, fp_id, created_at])
}

model user {
  id                    BigInt                  @id @default(autoincrement())
  created_at            DateTime                @default(now()) @db.Timestamptz(6)
  fname                 String                  @db.VarChar
  lname                 String                  @db.VarChar
  email                 String                  @unique(map: "user_user_email_key") @db.VarChar
  type_id               BigInt
  supervisor_id         BigInt?
  avatar_url            String?                 @db.VarChar
  user                  user?                   @relation("userTouser", fields: [supervisor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_type             user_type               @relation(fields: [type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  chatbot_assignment    chatbot_assignment[]
  chatbot_attempt       chatbot_attempt[]
  forum_post_assignment forum_post_assignment[]
  forum_post_attempt    forum_post_attempt[]
  other_user            user[]                  @relation("userTouser")
}

model user_type {
  id         BigInt   @id @default(autoincrement())
  name       String   @db.VarChar
  created_at DateTime @default(now()) @db.Timestamptz(6)
  user       user[]
}

model message_type {
  id                      BigInt                    @id @default(autoincrement())
  name                    String                    @unique @db.VarChar
  chatbot_attempt_message chatbot_attempt_message[]
}
