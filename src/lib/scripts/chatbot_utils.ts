import type {
  chatbot_attempt_POST,
  chatbot_attempt_message_POST
} from '../post_types';

// The functions below use the API generated by Prisma to interact with the database
async function storeChatAttempt(userId: number, cbmId: number) {
  let attempt: chatbot_attempt_POST = {
    user_id: userId,
    cbm_id: cbmId
  };

  const result = await (fetch('/api/chatbot_attempts/'),
  {
    method: 'POST',
    body: JSON.stringify(attempt)
  });

  console.log(result);
}

async function storeMessage(
  attemptId: number,
  messageText: string,
  messageType: chatbot_attempt_message_POST['message_type']
) {
  let message: chatbot_attempt_message_POST = {
    attempt_id: attemptId,
    text: messageText,
    message_type: messageType
  };

  const result = await fetch('/api/chatbot_messages/', {
    method: 'POST',
    body: JSON.stringify(message)
  });

  console.log(result);
}

export { storeChatAttempt, storeMessage };

// The 4 functions below execute queries directly to the Supabase client
// These functions are deprecated/currently not in use

/* import supabase from '../supabase';
import type { User } from '@supabase/supabase-js';
import userStore from '../../stores/authStore'; */

/* async function storeMessage(attempt_id: number, messageText: string) {
  try {
    const storedMessage = {
      attempt_id: attempt_id,
      text: messageText
    };

    let { error } = await supabase
      .from('chatbot_attempt_message')
      .insert(storedMessage, {
        returning: 'minimal'
      });

    if (error) throw error;
  } catch (error) {
    console.log(error);
  }
}

async function storeChatAttempt(userId: string, cbmId: number) {
  //TODO: Make sure this function works
  try {
    const storedAttempt = {
      user_id: userId,
      cbm_id: cbmId
    };

    let { error } = await supabase
      .from('chatbot_attempt')
      .insert(storedAttempt, {
        returning: 'minimal'
      });

    if (error) throw error;
  } catch (error) {
    console.log(error);
  }
}

async function getMessagesFromSupabase(attempt_id: number) {
  try {
    let { data, error } = await supabase
      .from('chatbot_attempt_message')
      .select(
        `
          attempt_id,
          created_at,
          text
        `
      )
      .eq('attempt_id', attempt_id);
    if (error) throw error;
    if (data) {
      return data;
    }
  } catch (error) {
    console.log(error);
  }
}

/**
 * Retrieves cbm_id and user id from supabase
 * @param moduleName
 * @returns An array [cbm_id, user_id]
 */
/* async function retrieveCBMIdAndUserID(moduleName: string) {
  let user: User;
  userStore.subscribe((value) => {
    user = value;
  });
  try {
    let { data, error } = await supabase
      .from('user')
      .select(
        ` 
        id,
        email,
        chatbot_assignment(
          cbm_id,
          user_id,
          duedate,
          created_at,
          completed_at,
          completed
        ),
        chatbot_module!chatbot_assignment(
          title, 
          description
        )
        `
      )
      .eq('email', user.email)
      .single();
    if (error) throw error;
    if (data) {
      let res: Array<any> = [];
      let assignments = data.chatbot_assignment;
      // Checks all the modules to get a cbm_id that matches moduleName
      for (let i: number = 0; i < assignments.length; i++) {
        if (moduleName == data.chatbot_module[i].title) {
          res.push(assignments[i].cbm_id);
        }
      }
      res.push(user.id);
      return res;
    }
  } catch (error) {
    console.log(error);
  }
}  */
